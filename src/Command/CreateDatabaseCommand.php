<?phpnamespace Hakam\MultiTenancyBundle\Command;use Exception;use Hakam\MultiTenancyBundle\Config\TenantConnectionConfigDTO;use Hakam\MultiTenancyBundle\Enum\DatabaseStatusEnum;use Hakam\MultiTenancyBundle\Exception\MultiTenancyException;use Hakam\MultiTenancyBundle\Port\TenantDatabaseManagerInterface;use Symfony\Component\Console\Attribute\AsCommand;use Symfony\Component\Console\Command\Command;use Symfony\Component\Console\Input\InputInterface;use Symfony\Component\Console\Output\OutputInterface;#[AsCommand(    name: 'tenant:database:create',    description: 'Proxy to create a new tenant database.',)]final class CreateDatabaseCommand extends Command{    use CommandTrait;    public function __construct(        private readonly TenantDatabaseManagerInterface $tenantDatabaseManager)    {        parent::__construct();    }    protected function configure(): void    {        $this            ->setDescription('Create  new databases for a tenant')            ->setAliases(['t:d:c'])            ->setHelp('This command allows you to create the  new database for a tenant which is added to the main database config entity');    }    protected function execute(InputInterface $input, OutputInterface $output): int    {        try {            $listOfNewDbs = $this->tenantDatabaseManager->listMissingDatabases();            if (empty($listOfNewDbs)) {                $output->writeln('No new databases to create');                return 0;            }            foreach ($listOfNewDbs as $newDb) {                $databaseCreated = $this->createDatabase($newDb, $output);                if (!$databaseCreated) {                    throw new MultiTenancyException(sprintf('Failed to create database %s', $newDb->dbname));                }                $output->writeln(sprintf('Database %s created successfully', $newDb->dbname));                $this->tenantDatabaseManager->updateTenantDatabaseStatus($newDb->identifier, DatabaseStatusEnum::DATABASE_CREATED);            }            $output->writeln('The new List of Databases created successfully');            return 0;        } catch (Exception $e) {            $output->writeln($e->getMessage());            return 1;        }    }    private function createDatabase(TenantConnectionConfigDTO $dbConfiguration, OutputInterface $output): bool    {        return $this->tenantDatabaseManager->createTenantDatabase($dbConfiguration);    }}