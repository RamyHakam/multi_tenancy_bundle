"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[164],{3875:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"customization/customization","title":"Custom TenantConfigProvider & TenantDatabaseManager","description":"Learn how to override the default Doctrine-based provider and manager with your own logic","source":"@site/docs/customization/customization.md","sourceDirName":"customization","slug":"/customization/","permalink":"/multi_tenancy_bundle/customization/","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/customization/customization.md","tags":[],"version":"current","frontMatter":{"id":"customization","title":"Custom TenantConfigProvider & TenantDatabaseManager","sidebar\\\\_label":"Customization","description":"Learn how to override the default Doctrine-based provider and manager with your own logic"},"sidebar":"tutorialSidebar","previous":{"title":"Tenant CLI Commands Reference","permalink":"/multi_tenancy_bundle/cli/cli-commands"},"next":{"title":"Suggested Patterns for Use","permalink":"/multi_tenancy_bundle/suggestions/"}}');var a=t(4848),s=t(8453);const r={id:"customization",title:"Custom TenantConfigProvider & TenantDatabaseManager",sidebar_label:"Customization",description:"Learn how to override the default Doctrine-based provider and manager with your own logic"},o="\ud83d\udd27 Customizing Tenant Configuration & Management",l={},c=[{value:"\ud83e\udd49 Why Override?",id:"-why-override",level:2},{value:"\u2705 How It Works",id:"-how-it-works",level:2},{value:"\ud83d\udca1 Example: Config from ENV or Secrets Manager",id:"-example-config-from-env-or-secrets-manager",level:2},{value:"\ud83d\udca1 Example: Dummy Manager (No Doctrine)",id:"-example-dummy-manager-no-doctrine",level:2},{value:"\ud83e\udd6a Use with Custom Security",id:"-use-with-custom-security",level:2},{value:"\ud83e\uddf5 Summary",id:"-summary",level:2}];function u(n){const e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"-customizing-tenant-configuration--management",children:"\ud83d\udd27 Customizing Tenant Configuration & Management"})}),"\n",(0,a.jsxs)(e.p,{children:["Starting with version ",(0,a.jsx)(e.code,{children:"3.0.0"}),", the Multi-Tenancy Bundle supports ",(0,a.jsx)(e.strong,{children:"plug-and-play customization"})," for the core tenant configuration and database management logic."]}),"\n",(0,a.jsx)(e.p,{children:"By default, the bundle uses Doctrine for:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Storing tenant DB configurations in an entity."}),"\n",(0,a.jsx)(e.li,{children:"Managing databases (e.g., creation, status updates) via Doctrine DBAL."}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["But this is ",(0,a.jsx)(e.strong,{children:"fully overrideable"})," with your own custom implementations."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-why-override",children:"\ud83e\udd49 Why Override?"}),"\n",(0,a.jsx)(e.p,{children:"Overriding is useful when:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["You store ",(0,a.jsx)(e.strong,{children:"tenant configuration outside Doctrine"}),", for example in:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Redis"}),"\n",(0,a.jsx)(e.li,{children:"Flat files"}),"\n",(0,a.jsx)(e.li,{children:"Environment variables"}),"\n",(0,a.jsx)(e.li,{children:"Secret management tools (e.g., Infisical, Vault, AWS Secrets Manager)"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["You want to implement ",(0,a.jsx)(e.strong,{children:"custom DB credential handling"}),", such as:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Obfuscated or hashed passwords"}),"\n",(0,a.jsx)(e.li,{children:"Rotating credentials"}),"\n",(0,a.jsx)(e.li,{children:"Centralized credential storage"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["You need to fetch configurations from ",(0,a.jsx)(e.strong,{children:"external APIs"})," or config servers."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"You want to decouple tenant database management from Doctrine (e.g., serverless environments or multi-region DBs)."}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["You want to support ",(0,a.jsx)(e.strong,{children:"dynamic tenant creation workflows"})," (e.g., provisioning on signup)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"This allows maximum flexibility for integrating your own infrastructure and security model while still using the bundle\u2019s powerful multi-tenancy engine."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-how-it-works",children:"\u2705 How It Works"}),"\n",(0,a.jsxs)(e.p,{children:["The bundle uses the following ",(0,a.jsx)(e.strong,{children:"interfaces"})," internally:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"TenantConfigProviderInterface"})," \u2014 returns ",(0,a.jsx)(e.code,{children:"TenantConnectionConfigDTO"})," for a given tenant."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"TenantDatabaseManagerInterface"})," \u2014 responsible for creating, listing, and updating tenant DBs."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"The default implementation uses Doctrine, but you can override it by implementing your own services and using:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"#[AsAlias(TenantConfigProviderInterface::class)]\nclass MyCustomConfigProvider implements TenantConfigProviderInterface\n{\n    // your implementation\n}\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"#[AsAlias(TenantDatabaseManagerInterface::class)]\nclass MyCustomDatabaseManager implements TenantDatabaseManagerInterface\n{\n    // your implementation\n}\n"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["\u2705 No need to use ",(0,a.jsx)(e.code,{children:"services.yaml"})," \u2014 just use ",(0,a.jsx)(e.code,{children:"#[AsAlias(...)]"})," and your class will be auto-wired as a replacement."]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-example-config-from-env-or-secrets-manager",children:"\ud83d\udca1 Example: Config from ENV or Secrets Manager"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"use Hakam\\MultiTenancyBundle\\Config\\TenantConnectionConfigDTO;\nuse Hakam\\MultiTenancyBundle\\Config\\TenantConfigProviderInterface;\nuse Hakam\\MultiTenancyBundle\\Enum\\DriverTypeEnum;\nuse Hakam\\MultiTenancyBundle\\Enum\\DatabaseStatusEnum;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsAlias;\n\n#[AsAlias(TenantConfigProviderInterface::class)]\nclass EnvTenantConfigProvider implements TenantConfigProviderInterface\n{\n    public function getTenantConnectionConfig(?string $identifier): TenantConnectionConfigDTO\n    {\n        return TenantConnectionConfigDTO::fromArgs(\n            identifier: (int) ($_ENV['TENANT_ID'] ?? 1),\n            driver: DriverTypeEnum::MYSQL,\n            dbStatus: DatabaseStatusEnum::DATABASE_CREATED,\n            host: $_ENV['TENANT_DB_HOST'],\n            port: (int) ($_ENV['TENANT_DB_PORT'] ?? 3306),\n            dbname: $_ENV['TENANT_DB_NAME'],\n            user: $_ENV['TENANT_DB_USER'],\n            password: $_ENV['TENANT_DB_PASSWORD']\n        );\n    }\n}\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-example-dummy-manager-no-doctrine",children:"\ud83d\udca1 Example: Dummy Manager (No Doctrine)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"use Hakam\\MultiTenancyBundle\\Config\\TenantConnectionConfigDTO;\nuse Hakam\\MultiTenancyBundle\\Enum\\DriverTypeEnum;\nuse Hakam\\MultiTenancyBundle\\Enum\\DatabaseStatusEnum;\nuse Hakam\\MultiTenancyBundle\\Port\\TenantDatabaseManagerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsAlias;\n\n#[AsAlias(TenantDatabaseManagerInterface::class)]\nclass DummyTenantDatabaseManager implements TenantDatabaseManagerInterface\n{\n    public function listDatabases(): array\n    {\n        return [\n            TenantConnectionConfigDTO::fromArgs(\n                identifier: 1,\n                driver: DriverTypeEnum::MYSQL,\n                dbStatus: DatabaseStatusEnum::DATABASE_MIGRATED,\n                host: 'dummy',\n                port: 3306,\n                dbname: 'tenant1',\n                user: 'user',\n                password: 'pass'\n            ),\n        ];\n    }\n\n    public function listMissingDatabases(): array\n    {\n        return [];\n    }\n\n    public function getDefaultTenantIDatabase(): TenantConnectionConfigDTO\n    {\n        return $this->listDatabases()[0];\n    }\n\n    public function createTenantDatabase(TenantConnectionConfigDTO $dto): bool\n    {\n        return true; // or call external API to provision the DB\n    }\n\n    public function updateTenantDatabaseStatus(string $identifier, DatabaseStatusEnum $status): bool\n    {\n        return true;\n    }\n}\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-use-with-custom-security",children:"\ud83e\udd6a Use with Custom Security"}),"\n",(0,a.jsx)(e.p,{children:"By combining this with custom tenant resolvers or identity mapping, you can securely:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Retrieve DB credentials from secrets"}),"\n",(0,a.jsx)(e.li,{children:"Auto-provision on signup"}),"\n",(0,a.jsx)(e.li,{children:"Rotate credentials dynamically"}),"\n",(0,a.jsx)(e.li,{children:"Disable tenants without deleting data"}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-summary",children:"\ud83e\uddf5 Summary"}),"\n",(0,a.jsx)(e.p,{children:"You can now fully override the tenant data source and management layer by swapping two services."}),"\n",(0,a.jsxs)(e.p,{children:["This keeps the bundle ",(0,a.jsx)(e.strong,{children:"flexible"}),", ",(0,a.jsx)(e.strong,{children:"lightweight"}),", and ",(0,a.jsx)(e.strong,{children:"agnostic"})," to your infrastructure \u2014 while still offering a powerful and scalable multi-tenant foundation."]})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);