"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[629],{7492:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"suggestions/suggestions","title":"Suggested Patterns for Use","description":"\ud83d\ude4f Thanks to @mogilvie for some of these patterns! and idea!","source":"@site/docs/suggestions/suggestions.md","sourceDirName":"suggestions","slug":"/suggestions/","permalink":"/multi_tenancy_bundle/suggestions/","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/suggestions/suggestions.md","tags":[],"version":"current","frontMatter":{"title":"Suggested Patterns for Use"},"sidebar":"tutorialSidebar","previous":{"title":"Custom TenantConfigProvider & TenantDatabaseManager","permalink":"/multi_tenancy_bundle/customization/"},"next":{"title":"Contributing","permalink":"/multi_tenancy_bundle/contributing/contribution"}}');var a=t(4848),r=t(8453);const s={title:"Suggested Patterns for Use"},o=void 0,c={},l=[{value:"1. User Pattern",id:"1-user-pattern",level:3},{value:"2. Tenant Interface",id:"2-tenant-interface",level:3},{value:"3. Custom Controller",id:"3-custom-controller",level:3},{value:"4. Custom Argument Resolver",id:"4-custom-argument-resolver",level:3},{value:"5. DQL Extensions",id:"5-dql-extensions",level:3},{value:"6. DB Host &amp; Credentials",id:"6-db-host--credentials",level:3}];function u(n){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["\ud83d\ude4f ",(0,a.jsxs)(e.strong,{children:["Thanks to ",(0,a.jsx)(e.a,{href:"https://github.com/mogilvie",children:"@mogilvie"})," for some of these patterns! and idea!"]})]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"1-user-pattern",children:"1. User Pattern"}),"\n",(0,a.jsx)(e.p,{children:"Store the user\u2019s current tenant ID in the session or on the User entity. This lets you retrieve the active tenant at any\ntime:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"\nnamespace App\\Entity\\Tenant;\n\nuse App\\Model\\OrgActivitySuperclass;\nuse App\\Repository\\Tenant\\OrgActivityRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Hakam\\MultiTenancyBundle\\Model\\TenantEntityInterface;\n\n#[ORM\\Entity(repositoryClass: OrgActivityRepository::class)]\nclass OrgActivity extends OrgActivitySuperclass implements TenantEntityInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n           \n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-tenant-interface",children:"2. Tenant Interface"}),"\n",(0,a.jsxs)(e.p,{children:["Implement ",(0,a.jsx)(e.code,{children:"TenantEntityInterface"})," on all tenant-specific entities to signal the bundle which EM to use:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"namespace App\\Entity\\Tenant;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Hakam\\MultiTenancyBundle\\Model\\TenantEntityInterface;\n\n#[ORM\\Entity]\nclass OrgActivity implements TenantEntityInterface\n{\n#[ORM\\Id, ORM\\GeneratedValue, ORM\\Column(type: 'integer')]\nprivate int $id;\n\npublic function getId(): int\n{\nreturn $this->id;\n}\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"3-custom-controller",children:"3. Custom Controller"}),"\n",(0,a.jsx)(e.p,{children:"Extend your base controller to override persistence methods for EM switching:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\Main\\Tenant;\nuse App\\Entity\\Tenant\\Organisation;\nuse Hakam\\MultiTenancyBundle\\Doctrine\\ORM\\TenantEntityManager;\nuse Hakam\\MultiTenancyBundle\\Event\\SwitchDbEvent;\nuse Hakam\\MultiTenancyBundle\\Model\\TenantEntityInterface;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Bundle\\SecurityBundle\\Security;\nuse Umbrella\\CoreBundle\\Controller\\BaseController;\n\nabstract class DbSwitcherController extends BaseController\n{\n    public function __construct(private EventDispatcherInterface $eventDispatcher, private TenantEntityManager $tenantEntityManager)\n    {\n    }\n    \n    protected function switchDb(Tenant $tenant): Organisation\n    {\n\n        // Switch the TenantEntityManager to the current tenant.\n        $event = new SwitchDbEvent($tenant->getId());\n        $this->eventDispatcher->dispatch($event);\n\n        // Optional depending on your usage, here we return the top entity whenever we switch to a new Tenant DB.\n        $organisation = $this->tenantEntityManager->getRepository(Organisation::class)\n            ->findOneIdByXeroOrganisationId($tenant->getXeroOrganisationId());\n\n        return $organisation;\n    }\n\n    /**\n     * Override parent method to check if the entity is a Tenant entity or main entity. Return which ever is appropriate.\n     */  \n    protected function findOrNotFound(string $className, $id)\n    {\n\n        $em = $this->em();\n\n        $reflection = new \\ReflectionClass($className);\n\n        if ($reflection instanceof TenantEntityInterface) {\n            $em = $this->tenantEntityManager;\n        }\n\n        $e = $em->find($className, $id);\n        $this->throwNotFoundExceptionIfNull($e);\n\n        return $e;\n    }\n\n    /**\n     * Override parent method to check if the entity is a Tenant entity or main entity. Return which ever is appropriate.\n     */  \n    protected function persistAndFlush($entity): void\n    {\n        if ($entity instanceof TenantEntityInterface) {\n            $this->tenantEntityManager->persist($entity);\n            $this->tenantEntityManager->flush();\n            return;\n        }\n        $this->em()->persist($entity);\n        $this->em()->flush();\n    }\n\n    /**\n     * Override parent method to check if the entity is a Tenant entity or main entity. Return which ever is appropriate.\n     */  \n    protected function removeAndFlush($entity): void\n    {\n        if ($entity instanceof TenantEntityInterface) {\n            $this->tenantEntityManager->remove($entity);\n            $this->tenantEntityManager->flush();\n            return;\n        }\n        $this->em()->remove($entity);\n        $this->em()->flush();\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"4-custom-argument-resolver",children:"4. Custom Argument Resolver"}),"\n",(0,a.jsxs)(e.p,{children:["Override Symfony\u2019s default ",(0,a.jsx)(e.code,{children:"EntityValueResolver"})," to switch DB for tenant entities:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n\nnamespace App\\ValueResolver;\n\nnamespace App\\ValueResolver;\n\nuse Doctrine\\DBAL\\Types\\ConversionException;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Doctrine\\Persistence\\ObjectManager;\nuse Hakam\\MultiTenancyBundle\\Doctrine\\ORM\\TenantEntityManager;\nuse Hakam\\MultiTenancyBundle\\Event\\SwitchDbEvent;\nuse Hakam\\MultiTenancyBundle\\Model\\TenantEntityInterface;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Bridge\\Doctrine\\Attribute\\MapEntity;\nuse Symfony\\Bundle\\SecurityBundle\\Security;\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Controller\\ValueResolverInterface;\nuse Symfony\\Component\\HttpKernel\\ControllerMetadata\\ArgumentMetadata;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\nclass TenantEntityValueResolver implements ValueResolverInterface\n{\n    public function __construct(\n        private ManagerRegistry $registry,\n        private Security $security,\n        private EventDispatcherInterface $eventDispatcher,\n        private TenantEntityManager $tenantEntityManager,\n        private MapEntity $defaults = new MapEntity(),\n        private ?ExpressionLanguage $expressionLanguage = null,\n    ) {\n    }\n\n    public function resolve(Request $request, ArgumentMetadata $argument): array\n    {\n        if (\\is_object($request->attributes->get($argument->getName()))) {\n            return [];\n        }\n\n        $options = $argument->getAttributes(MapEntity::class, ArgumentMetadata::IS_INSTANCEOF);\n        $options = ($options[0] ?? $this->defaults)->withDefaults($this->defaults, $argument->getType());\n\n        if (!$options->class || $options->disabled) {\n            return [];\n        }\n\n        $reflectionClass = new \\ReflectionClass($options->class);\n\n        if(!$reflectionClass instanceof TenantEntityInterface){\n            return [];\n        }\n\n        $currentTenant = $this->security->getUser()->getCurrentTenant();\n\n        $switchEvent = new SwitchDbEvent($currentTenant->getId());\n        $this->eventDispatcher->dispatch($switchEvent);\n\n        $manager = $this->tenantEntityManager;\n\n        if (!$manager instanceof TenantEntityManager) {\n            return [];\n        }\n\n        $message = '';\n        if (null !== $options->expr) {\n            if (null === $object = $this->findViaExpression($manager, $request, $options)) {\n                $message = sprintf(' The expression \"%s\" returned null.', $options->expr);\n            }\n            // find by identifier?\n        } elseif (false === $object = $this->find($manager, $request, $options, $argument->getName())) {\n            // find by criteria\n            if (!$criteria = $this->getCriteria($request, $options, $manager)) {\n                return [];\n            }\n            try {\n                $object = $manager->getRepository($options->class)->findOneBy($criteria);\n            } catch (NoResultException|ConversionException) {\n                $object = null;\n            }\n        }\n\n        if (null === $object && !$argument->isNullable()) {\n            throw new NotFoundHttpException(sprintf('\"%s\" object not found by \"%s\".', $options->class, self::class).$message);\n        }\n\n        return [$object];\n    }\n\n    private function getManager(?string $name, string $class): ?ObjectManager\n    {\n        if (null === $name) {\n            return $this->registry->getManagerForClass($class);\n        }\n\n        try {\n            $manager = $this->registry->getManager($name);\n        } catch (\\InvalidArgumentException) {\n            return null;\n        }\n\n        return $manager->getMetadataFactory()->isTransient($class) ? null : $manager;\n    }\n\n    private function find(ObjectManager $manager, Request $request, MapEntity $options, string $name): false|object|null\n    {\n        if ($options->mapping || $options->exclude) {\n            return false;\n        }\n\n        $id = $this->getIdentifier($request, $options, $name);\n        if (false === $id || null === $id) {\n            return $id;\n        }\n\n        if ($options->evictCache && $manager instanceof EntityManagerInterface) {\n            $cacheProvider = $manager->getCache();\n            if ($cacheProvider && $cacheProvider->containsEntity($options->class, $id)) {\n                $cacheProvider->evictEntity($options->class, $id);\n            }\n        }\n\n        try {\n            return $manager->getRepository($options->class)->find($id);\n        } catch (NoResultException|ConversionException) {\n            return null;\n        }\n    }\n\n    private function getIdentifier(Request $request, MapEntity $options, string $name): mixed\n    {\n        if (\\is_array($options->id)) {\n            $id = [];\n            foreach ($options->id as $field) {\n                // Convert \"%s_uuid\" to \"foobar_uuid\"\n                if (str_contains($field, '%s')) {\n                    $field = sprintf($field, $name);\n                }\n\n                $id[$field] = $request->attributes->get($field);\n            }\n\n            return $id;\n        }\n\n        if (null !== $options->id) {\n            $name = $options->id;\n        }\n\n        if ($request->attributes->has($name)) {\n            return $request->attributes->get($name) ?? ($options->stripNull ? false : null);\n        }\n\n        if (!$options->id && $request->attributes->has('id')) {\n            return $request->attributes->get('id') ?? ($options->stripNull ? false : null);\n        }\n\n        return false;\n    }\n\n    private function getCriteria(Request $request, MapEntity $options, ObjectManager $manager): array\n    {\n        if (null === $mapping = $options->mapping) {\n            $mapping = $request->attributes->keys();\n        }\n\n        if ($mapping && \\is_array($mapping) && array_is_list($mapping)) {\n            $mapping = array_combine($mapping, $mapping);\n        }\n\n        foreach ($options->exclude as $exclude) {\n            unset($mapping[$exclude]);\n        }\n\n        if (!$mapping) {\n            return [];\n        }\n\n        // if a specific id has been defined in the options and there is no corresponding attribute\n        // return false in order to avoid a fallback to the id which might be of another object\n        if (\\is_string($options->id) && null === $request->attributes->get($options->id)) {\n            return [];\n        }\n\n        $criteria = [];\n        $metadata = $manager->getClassMetadata($options->class);\n\n        foreach ($mapping as $attribute => $field) {\n            if (!$metadata->hasField($field) && (!$metadata->hasAssociation($field) || !$metadata->isSingleValuedAssociation($field))) {\n                continue;\n            }\n\n            $criteria[$field] = $request->attributes->get($attribute);\n        }\n\n        if ($options->stripNull) {\n            $criteria = array_filter($criteria, static fn ($value) => null !== $value);\n        }\n\n        return $criteria;\n    }\n\n    private function findViaExpression(ObjectManager $manager, Request $request, MapEntity $options): ?object\n    {\n        if (!$this->expressionLanguage) {\n            throw new \\LogicException(sprintf('You cannot use the \"%s\" if the ExpressionLanguage component is not available. Try running \"composer require symfony/expression-language\".', __CLASS__));\n        }\n\n        $repository = $manager->getRepository($options->class);\n        $variables = array_merge($request->attributes->all(), ['repository' => $repository]);\n\n        try {\n            return $this->expressionLanguage->evaluate($options->expr, $variables);\n        } catch (NoResultException|ConversionException) {\n            return null;\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Tag the resolver service with higher priority than Symfony\u2019s default."})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"services:\n  # Priority should fire before the default EntityValueResolver\n  App\\ValueResolver\\TenantEntityValueResolver:\n    tags:\n      - { name: controller.argument_value_resolver, priority: 150 }\n"})}),"\n",(0,a.jsx)(e.h3,{id:"5-dql-extensions",children:"5. DQL Extensions"}),"\n",(0,a.jsx)(e.p,{children:"Register custom DQL functions scoped to tenant queries:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"# config/packages/hakam_multi_tenancy.yaml\nhakam_multi_tenancy:\n  tenant_entity_manager:\n    dql:\n      string_functions:\n      json_extract: App\\\\DQL\\\\JsonExtractFunction\n    numeric_functions:\n      gaussian: App\\\\DQL\\\\GaussianFunction\n"})}),"\n",(0,a.jsx)(e.h3,{id:"6-db-host--credentials",children:"6. DB Host & Credentials"}),"\n",(0,a.jsxs)(e.p,{children:["Store per-tenant host/port/user/password fields on your ",(0,a.jsx)(e.code,{children:"TenantDbConfig"})," entity. The bundle will apply them on each\nswitch:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"class TenantDbConfig implements TenantEntityConfigurationInterface\n{\n      private string $host;\n     private int $port;\n    private string $username;\n     private string $password;\n\n     public function getHost(): string { return $this->host; }\n    public function getPort(): int { return $this->port; }\n    public function getUsername(): string { return $this->username; }\n    public function getPassword(): string { return $this->password; }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"With these patterns, your application code remains clean and your multi-tenant logic centralized. Enjoy building!"})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);