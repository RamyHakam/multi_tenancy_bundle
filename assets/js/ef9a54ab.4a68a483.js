"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[474],{8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var i=t(6540);const s={},a=i.createContext(s);function r(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(a.Provider,{value:e},n.children)}},8677:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"usage/usage","title":"Usage & Features","description":"The Usage & Features section dives into the core capabilities of the Symfony Multi-Tenancy Bundle. You\'ll find detailed workflows, examples, and best practices for each major feature:","source":"@site/docs/usage/usage.md","sourceDirName":"usage","slug":"/usage/","permalink":"/multi_tenancy_bundle/usage/","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/usage/usage.md","tags":[],"version":"current","frontMatter":{"title":"Usage & Features"},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/multi_tenancy_bundle/concepts/core-concepts"},"next":{"title":"Tenant CLI Commands Reference","permalink":"/multi_tenancy_bundle/cli/cli-commands"}}');var s=t(4848),a=t(8453);const r={title:"Usage & Features"},l=void 0,c={},o=[{value:"Runtime DB Switching",id:"runtime-db-switching",level:2},{value:"Tenant Migrations",id:"tenant-migrations",level:2},{value:"Bulk Operations",id:"bulk-operations",level:2},{value:"Tenant Fixtures",id:"tenant-fixtures",level:2},{value:"Custom Drivers &amp; Credentials",id:"custom-drivers--credentials",level:2}];function d(n){const e={code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.strong,{children:"Usage & Features"})," section dives into the core capabilities of the Symfony Multi-Tenancy Bundle. You'll find detailed workflows, examples, and best practices for each major feature:"]}),"\n",(0,s.jsx)(e.h2,{id:"runtime-db-switching",children:"Runtime DB Switching"}),"\n",(0,s.jsx)(e.p,{children:"Dynamically switch the active database connection to a tenant\u2019s database at runtime."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-php",children:"use Hakam\\MultiTenancyBundle\\Event\\SwitchDbEvent;\nuse Hakam\\MultiTenancyBundle\\Doctrine\\ORM\\TenantEntityManager;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\nclass OrderController\n{\n    public function __construct(\n        private TenantEntityManager $tenantEm,\n        private EventDispatcherInterface $dispatcher\n    ) {}\n\n    public function createOrder(int $tenantId)\n    {\n        // Switch to tenant DB\n        $this->dispatcher->dispatch(new SwitchDbEvent($tenantId));\n\n        // Use tenant EM as usual\n        $order = new Order();\n        $order->setTotal(49.99);\n        $this->tenantEm->persist($order);\n        $this->tenantEm->flush();\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Advanced Tips"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Dispatch using either the tenant ID or the full ",(0,s.jsx)(e.code,{children:"TenantDbConfig"})," entity."]}),"\n",(0,s.jsx)(e.li,{children:"Minimize dispatch calls by batching operations per tenant."}),"\n",(0,s.jsxs)(e.li,{children:["Enable ",(0,s.jsx)(e.code,{children:"auto_create"})," in config to let the bundle provision tenant DBs on demand."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"tenant-migrations",children:"Tenant Migrations"}),"\n",(0,s.jsx)(e.p,{children:"Manage each tenant\u2019s schema migrations independently from your main application."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Generate a new migration for tenant entities\nphp bin/console tenant:migration:diff --dbid=3\n\n# Initialize a newly created tenant database\nphp bin/console tenant:migration:migrate init --dbid=3\n\n# Update all existing tenant DBs to latest\nphp bin/console tenant:migration:migrate update --all\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Key Options"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"--dbid"}),": target a specific tenant by ID."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"init"})," vs ",(0,s.jsx)(e.code,{children:"update"}),": run initial migrations on new DBs vs apply diffs to existing."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"--all"}),": run the command across every tenant DB in one go."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Best Practices"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Preview diffs (",(0,s.jsx)(e.code,{children:"--dry-run"}),") before running in production."]}),"\n",(0,s.jsxs)(e.li,{children:["Keep tenant migration files under ",(0,s.jsx)(e.code,{children:"migrations/Tenant"})," to avoid conflicts."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"bulk-operations",children:"Bulk Operations"}),"\n",(0,s.jsx)(e.p,{children:"Perform cross-tenant tasks programmatically, such as data migrations or analytics."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-php",children:"$tenants = $mainEm->getRepository(TenantDbConfig::class)->findAll();\nforeach ($tenants as $config) {\n    // Switch once per tenant\n    $dispatcher->dispatch(new SwitchDbEvent($config));\n\n    // Example: seed a default setting\n    $setting = new TenantSetting();\n    $setting->setKey('timezone')->setValue('UTC');\n    $tenantEm->persist($setting);\n    $tenantEm->flush();\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Optimizations"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use generators or ",(0,s.jsx)(e.code,{children:"yield"})," to stream large tenant lists."]}),"\n",(0,s.jsx)(e.li,{children:"Wrap each tenant loop in a database transaction to rollback on failure."}),"\n",(0,s.jsx)(e.li,{children:"Parallelize using Symfony Messenger or CLI batching for large fleets."}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"tenant-fixtures",children:"Tenant Fixtures"}),"\n",(0,s.jsx)(e.p,{children:"Seed tenant-specific demo or test data via the same Doctrine fixtures API."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-php",children:"use Hakam\\MultiTenancyBundle\\Attribute\\TenantFixture;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\n\n#[TenantFixture]\nclass ProductFixtures extends Fixture\n{\n    public function load(ObjectManager $manager)\n    {\n        $product = new Product();\n        $product->setName('Demo Product');\n        $manager->persist($product);\n    }\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Load only tenant fixtures, per-tenant or all\nphp bin/console tenant:fixtures:load --dbid=5 --append\nphp bin/console tenant:fixtures:load --all\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Fixture Groups & Dependencies"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"--group="})," to segment fixtures by purpose (e.g. ",(0,s.jsx)(e.code,{children:"demo"}),", ",(0,s.jsx)(e.code,{children:"test"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:["Leverage Doctrine\u2019s ",(0,s.jsx)(e.code,{children:"DependentFixtureInterface"})," to define load order."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"custom-drivers--credentials",children:"Custom Drivers & Credentials"}),"\n",(0,s.jsx)(e.p,{children:"Override default DBAL settings per tenant for advanced sharding or hosted setups."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# global default\nhakam_multi_tenancy:\n  tenant_connection:\n    driver: 'pdo_mysql'\n    host: '%env(TENANT_DB_HOST)%'\n\n# override in TenantDbConfig entity:\nclass TenantDbConfig implements TenantDbConfigurationInterface\n{\n    public function getDriver(): string\n    {\n        return 'pdo_pgsql';\n    }\n\n    public function getHost(): string\n    {\n        return $this->customHost;\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Point high-tier tenants at dedicated clusters (e.g., AWS RDS vs on-prem)."}),"\n",(0,s.jsx)(e.li,{children:"Mix MySQL main database with PostgreSQL tenant stores for specific analytics."}),"\n",(0,s.jsx)(e.li,{children:"Rotate credentials programmatically for security compliance."}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:"With these usage patterns and examples, you\u2019ll harness the full power of the Symfony Multi-Tenancy Bundle to build robust, scalable, and secure multi-tenant applications."})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);