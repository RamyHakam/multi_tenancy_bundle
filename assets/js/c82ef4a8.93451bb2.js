"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[72],{7504:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"cli/cli-commands","title":"Tenant CLI Commands Reference","description":"The Symfony Multi-Tenancy Bundle ships with a suite of tenant:* console commands to manage tenants dbs.","source":"@site/docs/cli/cli-commands.md","sourceDirName":"cli","slug":"/cli/cli-commands","permalink":"/multi_tenancy_bundle/cli/cli-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/cli/cli-commands.md","tags":[],"version":"current","frontMatter":{"title":"Tenant CLI Commands Reference"},"sidebar":"tutorialSidebar","previous":{"title":"Usage & Features","permalink":"/multi_tenancy_bundle/usage/"},"next":{"title":"Custom TenantConfigProvider & TenantDatabaseManager","permalink":"/multi_tenancy_bundle/customization/"}}');var a=t(4848),s=t(8453);const d={title:"Tenant CLI Commands Reference"},r=void 0,l={},o=[{value:"Tenant Database Create (<code>tenant:database:create</code>)",id:"tenant-database-create-tenantdatabasecreate",level:2},{value:"Schema Diff Generation (<code>tenant:migration:diff</code>)",id:"schema-diff-generation-tenantmigrationdiff",level:2},{value:"Schema Migration (<code>tenant:migration:migrate</code>)",id:"schema-migration-tenantmigrationmigrate",level:2},{value:"Fixture Loading (<code>tenant:fixtures:load</code>)",id:"fixture-loading-tenantfixturesload",level:2}];function c(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The Symfony Multi-Tenancy Bundle ships with a suite of ",(0,a.jsx)(n.code,{children:"tenant:*"})," console commands to manage tenants dbs.\nThese commands ",(0,a.jsx)(n.strong,{children:"decorate"})," the existing Doctrine commands providing the same flags, options, and behavior while adding tenant database, migration, and fixture management."]}),"\n",(0,a.jsx)(n.p,{children:"Below is a consolidated reference with detailed examples and optional flags for each command."}),"\n",(0,a.jsxs)(n.h2,{id:"tenant-database-create-tenantdatabasecreate",children:["Tenant Database Create (",(0,a.jsx)(n.code,{children:"tenant:database:create"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Command:"})," ",(0,a.jsx)(n.code,{children:"tenant:database:create"})]}),"\n",(0,a.jsx)(n.p,{children:"Create one or more tenant databases (if they don\u2019t exist) and run initial migrations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create a single tenant DB by ID\nphp bin/console tenant:database:create --dbid=5\n\n# Create all tenants defined in the main registry\nphp bin/console tenant:database:create --all\n\n# Default behavior: create all missing tenant databases (backward compatible)\nphp bin/console tenant:database:create\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Options & Flags:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dbid=<id>"}),": Create database only for the tenant with the given ID."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--all"}),": Explicitly create all missing tenant databases."]}),"\n",(0,a.jsx)(n.li,{children:"No options: Default behavior creates all missing databases (backward compatible)."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If a tenant database already exists (status ",(0,a.jsx)(n.code,{children:"DATABASE_CREATED"})," or ",(0,a.jsx)(n.code,{children:"DATABASE_MIGRATED"}),"), the command will skip it with a notification."]}),"\n",(0,a.jsxs)(n.li,{children:["Cannot use ",(0,a.jsx)(n.code,{children:"--dbid"})," and ",(0,a.jsx)(n.code,{children:"--all"})," options together."]}),"\n",(0,a.jsx)(n.li,{children:"Command will fail gracefully if tenant ID is not found or database creation fails."}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"schema-diff-generation-tenantmigrationdiff",children:["Schema Diff Generation (",(0,a.jsx)(n.code,{children:"tenant:migration:diff"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Command:"})," ",(0,a.jsx)(n.code,{children:"tenant:migration:diff"})]}),"\n",(0,a.jsxs)(n.p,{children:["Generate a Doctrine schema diff for tenant entities, placing new migration files under ",(0,a.jsx)(n.code,{children:"migrations/Tenant"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Generate diff for tenant #3\nphp bin/console tenant:migration:diff --dbid=3\n\n# Generate diffs for all tenants\nphp bin/console tenant:migration:diff --all\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Options & Flags:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dbid=<id>"}),"   \tGenerate diff for a specific tenant."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--all"}),"         \tGenerate diffs for every tenant in the registry."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--formatted"}),"   \tApply coding standards (PHP-CS-Fixer) to the generated file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dry-run"}),"     \tOutput SQL without writing files."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"schema-migration-tenantmigrationmigrate",children:["Schema Migration (",(0,a.jsx)(n.code,{children:"tenant:migration:migrate"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Command:"})," ",(0,a.jsx)(n.code,{children:"tenant:migration:migrate"})]}),"\n",(0,a.jsx)(n.p,{children:"Apply schema migrations to tenant databases. Supports initializing new DBs or updating existing ones."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Initialize migrations on a new tenant DB\nphp bin/console tenant:migration:migrate init --dbid=4\n\n# Update existing tenants to the latest version\nphp bin/console tenant:migration:migrate update --all\n"})}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Subcommand"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"init"})}),(0,a.jsx)(n.td,{children:"Run pending migrations on newly created DBs"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"update"})}),(0,a.jsx)(n.td,{children:"Upgrade all existing DBs to latest schema"})]})]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Options & Flags:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dbid=<id>"}),"   \tApply only to the specified tenant."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--all"}),"         \tApply to every tenant."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--step=<n>"}),"    \tLimit to the next ",(0,a.jsx)(n.em,{children:"n"})," migration versions."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dry-run"}),"     \tShow SQL without making changes."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"fixture-loading-tenantfixturesload",children:["Fixture Loading (",(0,a.jsx)(n.code,{children:"tenant:fixtures:load"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Command:"})," ",(0,a.jsx)(n.code,{children:"tenant:fixtures:load"})]}),"\n",(0,a.jsxs)(n.p,{children:["Load Doctrine fixtures into tenant databases. Only classes annotated with ",(0,a.jsx)(n.code,{children:"#[TenantFixture]"})," will be executed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Load fixtures for tenant #7, appending to existing data\nphp bin/console tenant:fixtures:load --dbid=7 --append\n\n# Purge with TRUNCATE, then load for all tenants\nphp bin/console tenant:fixtures:load --all --purge-with-truncate\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Options & Flags:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--dbid=<id>"}),"             \tTarget a specific tenant."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--all"}),"                   \tRun for every tenant in the system."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--append"}),"                \tDo not purge existing data; append only."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--purge-with-truncate"}),"   \tPurge tables by TRUNCATE instead of DELETE."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--group=<name>"}),"          \tLoad only fixtures in the specified group."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--no-interaction"}),"        \tRun in non-interactive mode, skipping confirmations."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With these commands and flags, you can fully automate tenant provisioning, schema evolution, and test data loading from the Symfony console or your CI/CD pipelines."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function d(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);