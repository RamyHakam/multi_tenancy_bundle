"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[28],{5233:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"intro/architecture","title":"Architecture Overview","description":"The Symfony Multi-Tenancy Bundle is built on a clear, event-driven architecture that keeps tenant data isolated while sharing a single application codebase.","source":"@site/docs/intro/architecture.md","sourceDirName":"intro","slug":"/intro/architecture","permalink":"/multi_tenancy_bundle/intro/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/intro/architecture.md","tags":[],"version":"current","frontMatter":{"title":"Architecture Overview"},"sidebar":"tutorialSidebar","previous":{"title":"Why Multi-Tenancy?","permalink":"/multi_tenancy_bundle/intro/why-multi-tenancy"},"next":{"title":"Getting Started","permalink":"/multi_tenancy_bundle/getting-started/"}}');var s=t(4848),r=t(8453);const a={title:"Architecture Overview"},c=void 0,l={},o=[{value:"How to Use This Architecture",id:"how-to-use-this-architecture",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+----------------------+      +----------------------+\n|      Main DB         |      |     Tenant DB(s)     |\n| +------------------+ |      | +------------------+ |\n| | TenantConfig     | |<----\x3e| | Schema & Data     | |\n| +------------------+ |      | +------------------+ |\n+----------------------+      +----------------------+\n\nEventDispatcher -> SwitchDbEvent -> TenantEntityManager switches connection\n"})}),"\n",(0,s.jsx)(n.p,{children:"The Symfony Multi-Tenancy Bundle is built on a clear, event-driven architecture that keeps tenant data isolated while sharing a single application codebase."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Tenant Registry & Configuration"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"Main Database"})," stores a ",(0,s.jsx)(n.code,{children:"TenantDbConfig"})," entity for each tenant."]}),"\n",(0,s.jsx)(n.li,{children:"This entity holds connection parameters (host, driver, credentials, schema name) and lifecycle timestamps."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Dynamic Connection Switching"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"At runtime\u2014whether in an HTTP request or console command\u2014you dispatch:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$dispatcher->dispatch(new SwitchDbEvent($tenantId));\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The bundle listens for ",(0,s.jsx)(n.code,{children:"SwitchDbEvent"}),", resolves the associated ",(0,s.jsx)(n.code,{children:"TenantDbConfig"}),", and reconfigures the ",(0,s.jsx)(n.code,{children:"TenantEntityManager"})," connection parameters on the fly."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Isolated Entity Managers"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Main EntityManager"}),": Manages your global and shared entities (e.g., tenants registry, application settings)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TenantEntityManager"}),": A separate service injected wherever you need tenant-specific operations. It automatically reconnects to the selected tenant\u2019s database after the event is dispatched."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Separate Migration & Fixture Paths"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Migrations for the main schema and tenant schemas live in different directories (",(0,s.jsx)(n.code,{children:"migrations/Main"})," vs ",(0,s.jsx)(n.code,{children:"migrations/Tenant"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Fixtures decorated with ",(0,s.jsx)(n.code,{children:"#[TenantFixture]"})," only run against tenant DBs, ensuring seeding and test data remain isolated."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Lifecycle & Error Handling"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If a tenant database doesn\u2019t exist, you can enable ",(0,s.jsx)(n.strong,{children:"on-the-fly creation"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Connection failures throw clear exceptions, allowing you to implement retry logic or fallback strategies."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use-this-architecture",children:"How to Use This Architecture"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Define Your TenantConfig"}),"\nCreate an entity in ",(0,s.jsx)(n.code,{children:"src/Entity/Main"})," implementing ",(0,s.jsx)(n.code,{children:"TenantDbConfigurationInterface"})," (use the provided trait for convenience)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dispatch the Switch Event"}),"\nIn controllers or services, dispatch ",(0,s.jsx)(n.code,{children:"SwitchDbEvent"})," before any tenant operations:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function index(EventDispatcherInterface $dispatcher, TenantEntityManager $tem)\n{\n$dispatcher->dispatch(new SwitchDbEvent($tenantId));\n$user = (new User())->setName('Demo');\n$tem->persist($user);\n$tem->flush();\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Manage Migrations & Fixtures"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Generate tenant migrations: ",(0,s.jsx)(n.code,{children:"php bin/console tenant:migration:diff"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Apply them: ",(0,s.jsx)(n.code,{children:"php bin/console tenant:migration:migrate update"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Load fixtures: ",(0,s.jsx)(n.code,{children:"php bin/console tenant:fixtures:load --append"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"With this architecture, you maintain a single codebase but fully isolated data layers for each tenant, combining the best of multi-tenancy and Symfony\u2019s power."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);