"use strict";(self.webpackChunkmulti_tenancy_bundle_docs=self.webpackChunkmulti_tenancy_bundle_docs||[]).push([[190],{169:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/core-concepts","title":"Core Concepts","description":"The Core Concepts of the Symfony Multi-Tenancy Bundle define how your application separates, manages, and operates on data for multiple tenants. This consolidated guide covers entity organization, database separation, runtime switching, and entity manager roles.","source":"@site/docs/concepts/core-concepts.md","sourceDirName":"concepts","slug":"/concepts/core-concepts","permalink":"/multi_tenancy_bundle/concepts/core-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/RamyHakam/multi_tenancy_bundle/tree/master/docs-site/docs/concepts/core-concepts.md","tags":[],"version":"current","frontMatter":{"title":"Core Concepts"},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/multi_tenancy_bundle/getting-started/"},"next":{"title":"Usage & Features","permalink":"/multi_tenancy_bundle/usage/"}}');var i=t(4848),a=t(8453);const r={title:"Core Concepts"},c=void 0,l={},d=[{value:"1. Tenant Entities",id:"1-tenant-entities",level:2},{value:"2. Main vs Tenant Databases",id:"2-main-vs-tenant-databases",level:2},{value:"3. Entity Managers",id:"3-entity-managers",level:2},{value:"4. Switching Databases",id:"4-switching-databases",level:2},{value:"Best Practices &amp; Patterns",id:"best-practices--patterns",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Core Concepts"})," of the Symfony Multi-Tenancy Bundle define how your application separates, manages, and operates on data for multiple tenants. This consolidated guide covers entity organization, database separation, runtime switching, and entity manager roles."]}),"\n",(0,i.jsx)(n.h2,{id:"1-tenant-entities",children:"1. Tenant Entities"}),"\n",(0,i.jsxs)(n.p,{children:["Tenant-specific entities must implement the ",(0,i.jsx)(n.code,{children:"TenantEntityInterface"})," and reside in ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"src/Entity/Tenant/"})}),". This signals to the bundle which objects belong to tenant databases:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"namespace App\\Entity\\Tenant;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Hakam\\MultiTenancyBundle\\Model\\TenantEntityInterface;\n\n#[ORM\\Entity]\nclass Order implements TenantEntityInterface\n{\n#[ORM\\Id, ORM\\GeneratedValue, ORM\\Column(type: 'integer')]\nprivate int $id;\n// ... other fields & methods\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why it matters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic Recognition"}),": The bundle uses the interface to determine when to switch EMs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean Separation"}),": Keeps tenant models isolated from main application entities."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-main-vs-tenant-databases",children:"2. Main vs Tenant Databases"}),"\n",(0,i.jsxs)(n.p,{children:["A clear separation between the ",(0,i.jsx)(n.strong,{children:"Main Database"})," and ",(0,i.jsx)(n.strong,{children:"Tenant Databases"})," is fundamental:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Main DB"}),(0,i.jsx)(n.th,{children:"Tenant DB (per-tenant)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Purpose"}),(0,i.jsx)(n.td,{children:"Store application settings, tenant registry"}),(0,i.jsx)(n.td,{children:"Hold each tenant\u2019s business data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Location"}),(0,i.jsx)(n.td,{children:"Single shared database"}),(0,i.jsx)(n.td,{children:"One database per tenant instance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Migrations Path"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"migrations/Main"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"migrations/Tenant"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Entity Manager"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"default"})," EM"]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TenantEntityManager"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolation & Security"}),": No shared tables means no accidental data leaks."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Scale out tenant databases independently (e.g., different servers or regions)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compliance"}),": Store data in the correct geographic or legal boundary."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-entity-managers",children:"3. Entity Managers"}),"\n",(0,i.jsxs)(n.p,{children:["The bundle introduces a dedicated ",(0,i.jsx)(n.code,{children:"TenantEntityManager"})," alongside your standard ",(0,i.jsx)(n.code,{children:"default"})," EM."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"default EM"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Manages entities in ",(0,i.jsx)(n.code,{children:"src/Entity/Main"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Uses your default DBAL connection (e.g., ",(0,i.jsx)(n.code,{children:"%DATABASE_URL%"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TenantEntityManager"}),":"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Injected as a separate service"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Reconfigures its DBAL connection on each ",(0,i.jsx)(n.code,{children:"SwitchDbEvent"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Manages only tenant entities and schemas"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example service injection:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function __construct(\nprivate EntityManagerInterface $defaultEm,\nprivate TenantEntityManager $tenantEm\n) {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-switching-databases",children:"4. Switching Databases"}),"\n",(0,i.jsxs)(n.p,{children:["To direct operations to a tenant database, dispatch the ",(0,i.jsx)(n.code,{children:"SwitchDbEvent"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Hakam\\MultiTenancyBundle\\Event\\SwitchDbEvent;\n\n// Using tenant ID:\n$dispatcher->dispatch(new SwitchDbEvent($tenantId));\n\n// Or using the TenantConfig entity:\n$dispatcher->dispatch(new SwitchDbEvent($tenantConfigEntity));\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once dispatched, all subsequent calls to ",(0,i.jsx)(n.code,{children:"$tenantEm->persist()"}),", ",(0,i.jsx)(n.code,{children:"flush()"}),", or repository queries use the selected tenant\u2019s connection."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Under the hood:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The bundle grabs the ",(0,i.jsx)(n.code,{children:"TenantDbConfig"})," (host, credentials, schema) from the main DB."]}),"\n",(0,i.jsxs)(n.li,{children:["It updates the ",(0,i.jsx)(n.code,{children:"TenantEntityManager"}),"\u2019s connection parameters."]}),"\n",(0,i.jsx)(n.li,{children:"Clears any open connections and reconnects to the target tenant DB."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices--patterns",children:"Best Practices & Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal Switches"}),": Group tenant operations to reduce event dispatch overhead."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Wrappers"}),": Encapsulate tenant logic in services that handle switching internally."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Catch and log connection exceptions to implement retries or fallback logic."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing"}),": Write integration tests that simulate multiple ",(0,i.jsx)(n.code,{children:"SwitchDbEvent"})," dispatches in isolation."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With these core concepts, you\u2019ll design and implement multi-tenant systems in Symfony with clear boundaries, robust isolation, and flexible scalability."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);